// Generated from /home/stuart/Documents/juneau.rust/src/parsing/jasm/JasmLexer.g4 by ANTLR 4.8
#![allow(dead_code)]
#![allow(nonstandard_style)]
#![allow(unused_imports)]
use antlr_rust::atn::ATN;
use antlr_rust::char_stream::CharStream;
use antlr_rust::int_stream::IntStream;
use antlr_rust::lexer::{BaseLexer, Lexer, LexerRecog};
use antlr_rust::atn_deserializer::ATNDeserializer;
use antlr_rust::dfa::DFA;
use antlr_rust::lexer_atn_simulator::{LexerATNSimulator, ILexerATNSimulator};
use antlr_rust::PredictionContextCache;
use antlr_rust::recognizer::{Recognizer,Actions};
use antlr_rust::error_listener::ErrorListener;
use antlr_rust::token_source::TokenSource;
use antlr_rust::token_factory::{TokenFactory,CommonTokenFactory,TokenAware};
use antlr_rust::token::*;
use antlr_rust::rule_context::{BaseRuleContext,EmptyCustomRuleContext,EmptyContext};
use antlr_rust::parser_rule_context::{ParserRuleContext,BaseParserRuleContext,cast};
use antlr_rust::vocabulary::{Vocabulary,VocabularyImpl};

use antlr_rust::{lazy_static,Tid,TidAble,TidExt};

use std::sync::Arc;
use std::cell::RefCell;
use std::rc::Rc;
use std::marker::PhantomData;
use std::ops::{Deref, DerefMut};


	pub const WHITESPACE:isize=1; 
	pub const LET:isize=2; 
	pub const IF:isize=3; 
	pub const ELSE:isize=4; 
	pub const TRUE:isize=5; 
	pub const FALSE:isize=6; 
	pub const WHILE:isize=7; 
	pub const NULL:isize=8; 
	pub const FUNCTION:isize=9; 
	pub const STRUCT:isize=10; 
	pub const AS:isize=11; 
	pub const RETURN:isize=12; 
	pub const SHIFTLEFT:isize=13; 
	pub const SHIFTRIGHT:isize=14; 
	pub const AMPERSAND:isize=15; 
	pub const DOT:isize=16; 
	pub const EXCLAMATION:isize=17; 
	pub const PLUS:isize=18; 
	pub const MINUS:isize=19; 
	pub const ASTERISK:isize=20; 
	pub const DIVISION:isize=21; 
	pub const PERCENT:isize=22; 
	pub const ASSIGN:isize=23; 
	pub const EQUAL:isize=24; 
	pub const NOTEQUAL:isize=25; 
	pub const GREATER:isize=26; 
	pub const GREATEREQUAL:isize=27; 
	pub const LESS:isize=28; 
	pub const LESSEQUAL:isize=29; 
	pub const AND:isize=30; 
	pub const OR:isize=31; 
	pub const XOR:isize=32; 
	pub const LEFTPAREN:isize=33; 
	pub const RIGHTPAREN:isize=34; 
	pub const LEFTBRACE:isize=35; 
	pub const RIGHTBRACE:isize=36; 
	pub const LEFTSQUARE:isize=37; 
	pub const RIGHTSQUARE:isize=38; 
	pub const SEMICOLON:isize=39; 
	pub const COMMA:isize=40; 
	pub const COLON:isize=41; 
	pub const QUESTIONMARK:isize=42; 
	pub const DOUBLEQUOTE:isize=43; 
	pub const INTEGER:isize=44; 
	pub const DECIMAL:isize=45; 
	pub const IDENTIFIER:isize=46; 
	pub const TEXT:isize=47;
	pub const STRING: usize=1;
	pub const channelNames: [&'static str;0+2] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	];

	pub const modeNames: [&'static str;2] = [
		"DEFAULT_MODE", "STRING"
	];

	pub const ruleNames: [&'static str;48] = [
		"WHITESPACE", "LET", "IF", "ELSE", "TRUE", "FALSE", "WHILE", "NULL", "FUNCTION", 
		"STRUCT", "AS", "RETURN", "SHIFTLEFT", "SHIFTRIGHT", "AMPERSAND", "DOT", 
		"EXCLAMATION", "PLUS", "MINUS", "ASTERISK", "DIVISION", "PERCENT", "ASSIGN", 
		"EQUAL", "NOTEQUAL", "GREATER", "GREATEREQUAL", "LESS", "LESSEQUAL", "AND", 
		"OR", "XOR", "LEFTPAREN", "RIGHTPAREN", "LEFTBRACE", "RIGHTBRACE", "LEFTSQUARE", 
		"RIGHTSQUARE", "SEMICOLON", "COMMA", "COLON", "QUESTIONMARK", "DOUBLEQUOTE", 
		"INTEGER", "DECIMAL", "IDENTIFIER", "TEXT", "DOUBLEQUOTE_STRING"
	];


	pub const _LITERAL_NAMES: [Option<&'static str>;43] = [
		None, None, Some("'let'"), Some("'if'"), Some("'else'"), Some("'true'"), 
		Some("'false'"), Some("'while'"), Some("'null'"), Some("'function'"), 
		Some("'struct'"), Some("'as'"), Some("'return'"), Some("'<<'"), Some("'>>'"), 
		Some("'&'"), Some("'.'"), Some("'!'"), Some("'+'"), Some("'-'"), Some("'*'"), 
		Some("'/'"), Some("'%'"), Some("'='"), Some("'=='"), Some("'!='"), Some("'>'"), 
		Some("'>='"), Some("'<'"), Some("'<='"), Some("'and'"), Some("'or'"), 
		Some("'xor'"), Some("'('"), Some("')'"), Some("'{'"), Some("'}'"), Some("'['"), 
		Some("']'"), Some("';'"), Some("','"), Some("':'"), Some("'?'")
	];
	pub const _SYMBOLIC_NAMES: [Option<&'static str>;48]  = [
		None, Some("WHITESPACE"), Some("LET"), Some("IF"), Some("ELSE"), Some("TRUE"), 
		Some("FALSE"), Some("WHILE"), Some("NULL"), Some("FUNCTION"), Some("STRUCT"), 
		Some("AS"), Some("RETURN"), Some("SHIFTLEFT"), Some("SHIFTRIGHT"), Some("AMPERSAND"), 
		Some("DOT"), Some("EXCLAMATION"), Some("PLUS"), Some("MINUS"), Some("ASTERISK"), 
		Some("DIVISION"), Some("PERCENT"), Some("ASSIGN"), Some("EQUAL"), Some("NOTEQUAL"), 
		Some("GREATER"), Some("GREATEREQUAL"), Some("LESS"), Some("LESSEQUAL"), 
		Some("AND"), Some("OR"), Some("XOR"), Some("LEFTPAREN"), Some("RIGHTPAREN"), 
		Some("LEFTBRACE"), Some("RIGHTBRACE"), Some("LEFTSQUARE"), Some("RIGHTSQUARE"), 
		Some("SEMICOLON"), Some("COMMA"), Some("COLON"), Some("QUESTIONMARK"), 
		Some("DOUBLEQUOTE"), Some("INTEGER"), Some("DECIMAL"), Some("IDENTIFIER"), 
		Some("TEXT")
	];
	lazy_static!{
	    static ref _shared_context_cache: Arc<PredictionContextCache> = Arc::new(PredictionContextCache::new());
		static ref VOCABULARY: Box<dyn Vocabulary> = Box::new(VocabularyImpl::new(_LITERAL_NAMES.iter(), _SYMBOLIC_NAMES.iter(), None));
	}


pub type LexerContext<'input> = BaseRuleContext<'input,EmptyCustomRuleContext<'input,LocalTokenFactory<'input> >>;
pub type LocalTokenFactory<'input> = CommonTokenFactory;

type From<'a> = <LocalTokenFactory<'a> as TokenFactory<'a> >::From;

#[derive(Tid)]
pub struct JasmLexer<'input, Input:CharStream<From<'input> >> {
	base: BaseLexer<'input,JasmLexerActions,Input,LocalTokenFactory<'input>>,
}

impl<'input, Input:CharStream<From<'input> >> Deref for JasmLexer<'input,Input>{
	type Target = BaseLexer<'input,JasmLexerActions,Input,LocalTokenFactory<'input>>;

	fn deref(&self) -> &Self::Target {
		&self.base
	}
}

impl<'input, Input:CharStream<From<'input> >> DerefMut for JasmLexer<'input,Input>{
	fn deref_mut(&mut self) -> &mut Self::Target {
		&mut self.base
	}
}


impl<'input, Input:CharStream<From<'input> >> JasmLexer<'input,Input>{
    fn get_rule_names(&self) -> &'static [&'static str] {
        &ruleNames
    }
    fn get_literal_names(&self) -> &[Option<&str>] {
        &_LITERAL_NAMES
    }

    fn get_symbolic_names(&self) -> &[Option<&str>] {
        &_SYMBOLIC_NAMES
    }

    fn get_grammar_file_name(&self) -> &'static str {
        "JasmLexer.g4"
    }

	pub fn new_with_token_factory(input: Input, tf: &'input LocalTokenFactory<'input>) -> Self {
		antlr_rust::recognizer::check_version("0","2");
    	Self {
			base: BaseLexer::new_base_lexer(
				input,
				LexerATNSimulator::new_lexer_atnsimulator(
					_ATN.clone(),
					_decision_to_DFA.clone(),
					_shared_context_cache.clone(),
				),
				JasmLexerActions{},
				tf
			)
	    }
	}
}

impl<'input, Input:CharStream<From<'input> >> JasmLexer<'input,Input> where &'input LocalTokenFactory<'input>:Default{
	pub fn new(input: Input) -> Self{
		JasmLexer::new_with_token_factory(input, <&LocalTokenFactory<'input> as Default>::default())
	}
}

pub struct JasmLexerActions {
}

impl JasmLexerActions{
}

impl<'input, Input:CharStream<From<'input> >> Actions<'input,BaseLexer<'input,JasmLexerActions,Input,LocalTokenFactory<'input>>> for JasmLexerActions{
	}

	impl<'input, Input:CharStream<From<'input> >> JasmLexer<'input,Input>{

}

impl<'input, Input:CharStream<From<'input> >> LexerRecog<'input,BaseLexer<'input,JasmLexerActions,Input,LocalTokenFactory<'input>>> for JasmLexerActions{
}
impl<'input> TokenAware<'input> for JasmLexerActions{
	type TF = LocalTokenFactory<'input>;
}

impl<'input, Input:CharStream<From<'input> >> TokenAware<'input> for JasmLexer<'input,Input>{
	type TF = LocalTokenFactory<'input>;
}

impl<'input, Input:CharStream<From<'input> >> TokenSource<'input> for JasmLexer<'input,Input>{

    fn next_token(&mut self) -> <Self::TF as TokenFactory<'input>>::Tok {
        self.base.next_token()
    }

    fn get_line(&self) -> isize {
        self.base.get_line()
    }

    fn get_char_position_in_line(&self) -> isize {
        self.base.get_char_position_in_line()
    }

    fn get_input_stream(&mut self) -> Option<&mut dyn IntStream> {
        self.base.get_input_stream()
    }

	fn get_source_name(&self) -> String {
		self.base.get_source_name()
	}

    fn get_token_factory(&self) -> &'input Self::TF {
        self.base.get_token_factory()
    }
}



	lazy_static! {
	    static ref _ATN: Arc<ATN> =
	        Arc::new(ATNDeserializer::new(None).deserialize(_serializedATN.chars()));
	    static ref _decision_to_DFA: Arc<Vec<DFA>> = {
	        let mut dfa = Vec::new();
	        let size = _ATN.decision_to_state.len();
	        for i in 0..size {
	            dfa.push(DFA::new(
	                _ATN.clone(),
	                _ATN.get_decision_state(i),
	                i as isize,
	            ))
	        }
	        Arc::new(dfa)
	    };
	}



	const _serializedATN:&'static str =
		"\x03\u{608b}\u{a72a}\u{8133}\u{b9ed}\u{417c}\u{3be7}\u{7786}\u{5964}\x02\
		\x31\u{11d}\x08\x01\x08\x01\x04\x02\x09\x02\x04\x03\x09\x03\x04\x04\x09\
		\x04\x04\x05\x09\x05\x04\x06\x09\x06\x04\x07\x09\x07\x04\x08\x09\x08\x04\
		\x09\x09\x09\x04\x0a\x09\x0a\x04\x0b\x09\x0b\x04\x0c\x09\x0c\x04\x0d\x09\
		\x0d\x04\x0e\x09\x0e\x04\x0f\x09\x0f\x04\x10\x09\x10\x04\x11\x09\x11\x04\
		\x12\x09\x12\x04\x13\x09\x13\x04\x14\x09\x14\x04\x15\x09\x15\x04\x16\x09\
		\x16\x04\x17\x09\x17\x04\x18\x09\x18\x04\x19\x09\x19\x04\x1a\x09\x1a\x04\
		\x1b\x09\x1b\x04\x1c\x09\x1c\x04\x1d\x09\x1d\x04\x1e\x09\x1e\x04\x1f\x09\
		\x1f\x04\x20\x09\x20\x04\x21\x09\x21\x04\x22\x09\x22\x04\x23\x09\x23\x04\
		\x24\x09\x24\x04\x25\x09\x25\x04\x26\x09\x26\x04\x27\x09\x27\x04\x28\x09\
		\x28\x04\x29\x09\x29\x04\x2a\x09\x2a\x04\x2b\x09\x2b\x04\x2c\x09\x2c\x04\
		\x2d\x09\x2d\x04\x2e\x09\x2e\x04\x2f\x09\x2f\x04\x30\x09\x30\x04\x31\x09\
		\x31\x03\x02\x06\x02\x66\x0a\x02\x0d\x02\x0e\x02\x67\x03\x02\x03\x02\x03\
		\x03\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\
		\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03\
		\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x08\x03\x08\x03\x08\x03\x08\x03\
		\x08\x03\x08\x03\x09\x03\x09\x03\x09\x03\x09\x03\x09\x03\x0a\x03\x0a\x03\
		\x0a\x03\x0a\x03\x0a\x03\x0a\x03\x0a\x03\x0a\x03\x0a\x03\x0b\x03\x0b\x03\
		\x0b\x03\x0b\x03\x0b\x03\x0b\x03\x0b\x03\x0c\x03\x0c\x03\x0c\x03\x0d\x03\
		\x0d\x03\x0d\x03\x0d\x03\x0d\x03\x0d\x03\x0d\x03\x0e\x03\x0e\x03\x0e\x03\
		\x0f\x03\x0f\x03\x0f\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\
		\x13\x03\x13\x03\x14\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\
		\x17\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03\x1a\x03\x1a\x03\x1a\x03\
		\x1b\x03\x1b\x03\x1c\x03\x1c\x03\x1c\x03\x1d\x03\x1d\x03\x1e\x03\x1e\x03\
		\x1e\x03\x1f\x03\x1f\x03\x1f\x03\x1f\x03\x20\x03\x20\x03\x20\x03\x21\x03\
		\x21\x03\x21\x03\x21\x03\x22\x03\x22\x03\x23\x03\x23\x03\x24\x03\x24\x03\
		\x25\x03\x25\x03\x26\x03\x26\x03\x27\x03\x27\x03\x28\x03\x28\x03\x29\x03\
		\x29\x03\x2a\x03\x2a\x03\x2b\x03\x2b\x03\x2c\x03\x2c\x03\x2c\x03\x2c\x03\
		\x2d\x03\x2d\x03\x2d\x07\x2d\u{f6}\x0a\x2d\x0c\x2d\x0e\x2d\u{f9}\x0b\x2d\
		\x05\x2d\u{fb}\x0a\x2d\x03\x2e\x03\x2e\x03\x2e\x07\x2e\u{100}\x0a\x2e\x0c\
		\x2e\x0e\x2e\u{103}\x0b\x2e\x05\x2e\u{105}\x0a\x2e\x03\x2e\x03\x2e\x06\
		\x2e\u{109}\x0a\x2e\x0d\x2e\x0e\x2e\u{10a}\x03\x2f\x03\x2f\x07\x2f\u{10f}\
		\x0a\x2f\x0c\x2f\x0e\x2f\u{112}\x0b\x2f\x03\x30\x06\x30\u{115}\x0a\x30\
		\x0d\x30\x0e\x30\u{116}\x03\x31\x03\x31\x03\x31\x03\x31\x03\x31\x02\x02\
		\x32\x04\x03\x06\x04\x08\x05\x0a\x06\x0c\x07\x0e\x08\x10\x09\x12\x0a\x14\
		\x0b\x16\x0c\x18\x0d\x1a\x0e\x1c\x0f\x1e\x10\x20\x11\x22\x12\x24\x13\x26\
		\x14\x28\x15\x2a\x16\x2c\x17\x2e\x18\x30\x19\x32\x1a\x34\x1b\x36\x1c\x38\
		\x1d\x3a\x1e\x3c\x1f\x3e\x20\x40\x21\x42\x22\x44\x23\x46\x24\x48\x25\x4a\
		\x26\x4c\x27\x4e\x28\x50\x29\x52\x2a\x54\x2b\x56\x2c\x58\x2d\x5a\x2e\x5c\
		\x2f\x5e\x30\x60\x31\x62\x02\x04\x02\x03\x08\x05\x02\x0b\x0c\x0f\x0f\x22\
		\x22\x03\x02\x33\x3b\x03\x02\x32\x3b\x06\x02\x26\x26\x43\x5c\x61\x61\x63\
		\x7c\x07\x02\x26\x26\x32\x3b\x43\x5c\x61\x61\x63\x7c\x03\x02\x24\x24\x02\
		\u{123}\x02\x04\x03\x02\x02\x02\x02\x06\x03\x02\x02\x02\x02\x08\x03\x02\
		\x02\x02\x02\x0a\x03\x02\x02\x02\x02\x0c\x03\x02\x02\x02\x02\x0e\x03\x02\
		\x02\x02\x02\x10\x03\x02\x02\x02\x02\x12\x03\x02\x02\x02\x02\x14\x03\x02\
		\x02\x02\x02\x16\x03\x02\x02\x02\x02\x18\x03\x02\x02\x02\x02\x1a\x03\x02\
		\x02\x02\x02\x1c\x03\x02\x02\x02\x02\x1e\x03\x02\x02\x02\x02\x20\x03\x02\
		\x02\x02\x02\x22\x03\x02\x02\x02\x02\x24\x03\x02\x02\x02\x02\x26\x03\x02\
		\x02\x02\x02\x28\x03\x02\x02\x02\x02\x2a\x03\x02\x02\x02\x02\x2c\x03\x02\
		\x02\x02\x02\x2e\x03\x02\x02\x02\x02\x30\x03\x02\x02\x02\x02\x32\x03\x02\
		\x02\x02\x02\x34\x03\x02\x02\x02\x02\x36\x03\x02\x02\x02\x02\x38\x03\x02\
		\x02\x02\x02\x3a\x03\x02\x02\x02\x02\x3c\x03\x02\x02\x02\x02\x3e\x03\x02\
		\x02\x02\x02\x40\x03\x02\x02\x02\x02\x42\x03\x02\x02\x02\x02\x44\x03\x02\
		\x02\x02\x02\x46\x03\x02\x02\x02\x02\x48\x03\x02\x02\x02\x02\x4a\x03\x02\
		\x02\x02\x02\x4c\x03\x02\x02\x02\x02\x4e\x03\x02\x02\x02\x02\x50\x03\x02\
		\x02\x02\x02\x52\x03\x02\x02\x02\x02\x54\x03\x02\x02\x02\x02\x56\x03\x02\
		\x02\x02\x02\x58\x03\x02\x02\x02\x02\x5a\x03\x02\x02\x02\x02\x5c\x03\x02\
		\x02\x02\x02\x5e\x03\x02\x02\x02\x03\x60\x03\x02\x02\x02\x03\x62\x03\x02\
		\x02\x02\x04\x65\x03\x02\x02\x02\x06\x6b\x03\x02\x02\x02\x08\x6f\x03\x02\
		\x02\x02\x0a\x72\x03\x02\x02\x02\x0c\x77\x03\x02\x02\x02\x0e\x7c\x03\x02\
		\x02\x02\x10\u{82}\x03\x02\x02\x02\x12\u{88}\x03\x02\x02\x02\x14\u{8d}\
		\x03\x02\x02\x02\x16\u{96}\x03\x02\x02\x02\x18\u{9d}\x03\x02\x02\x02\x1a\
		\u{a0}\x03\x02\x02\x02\x1c\u{a7}\x03\x02\x02\x02\x1e\u{aa}\x03\x02\x02\
		\x02\x20\u{ad}\x03\x02\x02\x02\x22\u{af}\x03\x02\x02\x02\x24\u{b1}\x03\
		\x02\x02\x02\x26\u{b3}\x03\x02\x02\x02\x28\u{b5}\x03\x02\x02\x02\x2a\u{b7}\
		\x03\x02\x02\x02\x2c\u{b9}\x03\x02\x02\x02\x2e\u{bb}\x03\x02\x02\x02\x30\
		\u{bd}\x03\x02\x02\x02\x32\u{bf}\x03\x02\x02\x02\x34\u{c2}\x03\x02\x02\
		\x02\x36\u{c5}\x03\x02\x02\x02\x38\u{c7}\x03\x02\x02\x02\x3a\u{ca}\x03\
		\x02\x02\x02\x3c\u{cc}\x03\x02\x02\x02\x3e\u{cf}\x03\x02\x02\x02\x40\u{d3}\
		\x03\x02\x02\x02\x42\u{d6}\x03\x02\x02\x02\x44\u{da}\x03\x02\x02\x02\x46\
		\u{dc}\x03\x02\x02\x02\x48\u{de}\x03\x02\x02\x02\x4a\u{e0}\x03\x02\x02\
		\x02\x4c\u{e2}\x03\x02\x02\x02\x4e\u{e4}\x03\x02\x02\x02\x50\u{e6}\x03\
		\x02\x02\x02\x52\u{e8}\x03\x02\x02\x02\x54\u{ea}\x03\x02\x02\x02\x56\u{ec}\
		\x03\x02\x02\x02\x58\u{ee}\x03\x02\x02\x02\x5a\u{fa}\x03\x02\x02\x02\x5c\
		\u{104}\x03\x02\x02\x02\x5e\u{10c}\x03\x02\x02\x02\x60\u{114}\x03\x02\x02\
		\x02\x62\u{118}\x03\x02\x02\x02\x64\x66\x09\x02\x02\x02\x65\x64\x03\x02\
		\x02\x02\x66\x67\x03\x02\x02\x02\x67\x65\x03\x02\x02\x02\x67\x68\x03\x02\
		\x02\x02\x68\x69\x03\x02\x02\x02\x69\x6a\x08\x02\x02\x02\x6a\x05\x03\x02\
		\x02\x02\x6b\x6c\x07\x6e\x02\x02\x6c\x6d\x07\x67\x02\x02\x6d\x6e\x07\x76\
		\x02\x02\x6e\x07\x03\x02\x02\x02\x6f\x70\x07\x6b\x02\x02\x70\x71\x07\x68\
		\x02\x02\x71\x09\x03\x02\x02\x02\x72\x73\x07\x67\x02\x02\x73\x74\x07\x6e\
		\x02\x02\x74\x75\x07\x75\x02\x02\x75\x76\x07\x67\x02\x02\x76\x0b\x03\x02\
		\x02\x02\x77\x78\x07\x76\x02\x02\x78\x79\x07\x74\x02\x02\x79\x7a\x07\x77\
		\x02\x02\x7a\x7b\x07\x67\x02\x02\x7b\x0d\x03\x02\x02\x02\x7c\x7d\x07\x68\
		\x02\x02\x7d\x7e\x07\x63\x02\x02\x7e\x7f\x07\x6e\x02\x02\x7f\u{80}\x07\
		\x75\x02\x02\u{80}\u{81}\x07\x67\x02\x02\u{81}\x0f\x03\x02\x02\x02\u{82}\
		\u{83}\x07\x79\x02\x02\u{83}\u{84}\x07\x6a\x02\x02\u{84}\u{85}\x07\x6b\
		\x02\x02\u{85}\u{86}\x07\x6e\x02\x02\u{86}\u{87}\x07\x67\x02\x02\u{87}\
		\x11\x03\x02\x02\x02\u{88}\u{89}\x07\x70\x02\x02\u{89}\u{8a}\x07\x77\x02\
		\x02\u{8a}\u{8b}\x07\x6e\x02\x02\u{8b}\u{8c}\x07\x6e\x02\x02\u{8c}\x13\
		\x03\x02\x02\x02\u{8d}\u{8e}\x07\x68\x02\x02\u{8e}\u{8f}\x07\x77\x02\x02\
		\u{8f}\u{90}\x07\x70\x02\x02\u{90}\u{91}\x07\x65\x02\x02\u{91}\u{92}\x07\
		\x76\x02\x02\u{92}\u{93}\x07\x6b\x02\x02\u{93}\u{94}\x07\x71\x02\x02\u{94}\
		\u{95}\x07\x70\x02\x02\u{95}\x15\x03\x02\x02\x02\u{96}\u{97}\x07\x75\x02\
		\x02\u{97}\u{98}\x07\x76\x02\x02\u{98}\u{99}\x07\x74\x02\x02\u{99}\u{9a}\
		\x07\x77\x02\x02\u{9a}\u{9b}\x07\x65\x02\x02\u{9b}\u{9c}\x07\x76\x02\x02\
		\u{9c}\x17\x03\x02\x02\x02\u{9d}\u{9e}\x07\x63\x02\x02\u{9e}\u{9f}\x07\
		\x75\x02\x02\u{9f}\x19\x03\x02\x02\x02\u{a0}\u{a1}\x07\x74\x02\x02\u{a1}\
		\u{a2}\x07\x67\x02\x02\u{a2}\u{a3}\x07\x76\x02\x02\u{a3}\u{a4}\x07\x77\
		\x02\x02\u{a4}\u{a5}\x07\x74\x02\x02\u{a5}\u{a6}\x07\x70\x02\x02\u{a6}\
		\x1b\x03\x02\x02\x02\u{a7}\u{a8}\x07\x3e\x02\x02\u{a8}\u{a9}\x07\x3e\x02\
		\x02\u{a9}\x1d\x03\x02\x02\x02\u{aa}\u{ab}\x07\x40\x02\x02\u{ab}\u{ac}\
		\x07\x40\x02\x02\u{ac}\x1f\x03\x02\x02\x02\u{ad}\u{ae}\x07\x28\x02\x02\
		\u{ae}\x21\x03\x02\x02\x02\u{af}\u{b0}\x07\x30\x02\x02\u{b0}\x23\x03\x02\
		\x02\x02\u{b1}\u{b2}\x07\x23\x02\x02\u{b2}\x25\x03\x02\x02\x02\u{b3}\u{b4}\
		\x07\x2d\x02\x02\u{b4}\x27\x03\x02\x02\x02\u{b5}\u{b6}\x07\x2f\x02\x02\
		\u{b6}\x29\x03\x02\x02\x02\u{b7}\u{b8}\x07\x2c\x02\x02\u{b8}\x2b\x03\x02\
		\x02\x02\u{b9}\u{ba}\x07\x31\x02\x02\u{ba}\x2d\x03\x02\x02\x02\u{bb}\u{bc}\
		\x07\x27\x02\x02\u{bc}\x2f\x03\x02\x02\x02\u{bd}\u{be}\x07\x3f\x02\x02\
		\u{be}\x31\x03\x02\x02\x02\u{bf}\u{c0}\x07\x3f\x02\x02\u{c0}\u{c1}\x07\
		\x3f\x02\x02\u{c1}\x33\x03\x02\x02\x02\u{c2}\u{c3}\x07\x23\x02\x02\u{c3}\
		\u{c4}\x07\x3f\x02\x02\u{c4}\x35\x03\x02\x02\x02\u{c5}\u{c6}\x07\x40\x02\
		\x02\u{c6}\x37\x03\x02\x02\x02\u{c7}\u{c8}\x07\x40\x02\x02\u{c8}\u{c9}\
		\x07\x3f\x02\x02\u{c9}\x39\x03\x02\x02\x02\u{ca}\u{cb}\x07\x3e\x02\x02\
		\u{cb}\x3b\x03\x02\x02\x02\u{cc}\u{cd}\x07\x3e\x02\x02\u{cd}\u{ce}\x07\
		\x3f\x02\x02\u{ce}\x3d\x03\x02\x02\x02\u{cf}\u{d0}\x07\x63\x02\x02\u{d0}\
		\u{d1}\x07\x70\x02\x02\u{d1}\u{d2}\x07\x66\x02\x02\u{d2}\x3f\x03\x02\x02\
		\x02\u{d3}\u{d4}\x07\x71\x02\x02\u{d4}\u{d5}\x07\x74\x02\x02\u{d5}\x41\
		\x03\x02\x02\x02\u{d6}\u{d7}\x07\x7a\x02\x02\u{d7}\u{d8}\x07\x71\x02\x02\
		\u{d8}\u{d9}\x07\x74\x02\x02\u{d9}\x43\x03\x02\x02\x02\u{da}\u{db}\x07\
		\x2a\x02\x02\u{db}\x45\x03\x02\x02\x02\u{dc}\u{dd}\x07\x2b\x02\x02\u{dd}\
		\x47\x03\x02\x02\x02\u{de}\u{df}\x07\x7d\x02\x02\u{df}\x49\x03\x02\x02\
		\x02\u{e0}\u{e1}\x07\x7f\x02\x02\u{e1}\x4b\x03\x02\x02\x02\u{e2}\u{e3}\
		\x07\x5d\x02\x02\u{e3}\x4d\x03\x02\x02\x02\u{e4}\u{e5}\x07\x5f\x02\x02\
		\u{e5}\x4f\x03\x02\x02\x02\u{e6}\u{e7}\x07\x3d\x02\x02\u{e7}\x51\x03\x02\
		\x02\x02\u{e8}\u{e9}\x07\x2e\x02\x02\u{e9}\x53\x03\x02\x02\x02\u{ea}\u{eb}\
		\x07\x3c\x02\x02\u{eb}\x55\x03\x02\x02\x02\u{ec}\u{ed}\x07\x41\x02\x02\
		\u{ed}\x57\x03\x02\x02\x02\u{ee}\u{ef}\x07\x24\x02\x02\u{ef}\u{f0}\x03\
		\x02\x02\x02\u{f0}\u{f1}\x08\x2c\x03\x02\u{f1}\x59\x03\x02\x02\x02\u{f2}\
		\u{fb}\x07\x32\x02\x02\u{f3}\u{f7}\x09\x03\x02\x02\u{f4}\u{f6}\x09\x04\
		\x02\x02\u{f5}\u{f4}\x03\x02\x02\x02\u{f6}\u{f9}\x03\x02\x02\x02\u{f7}\
		\u{f5}\x03\x02\x02\x02\u{f7}\u{f8}\x03\x02\x02\x02\u{f8}\u{fb}\x03\x02\
		\x02\x02\u{f9}\u{f7}\x03\x02\x02\x02\u{fa}\u{f2}\x03\x02\x02\x02\u{fa}\
		\u{f3}\x03\x02\x02\x02\u{fb}\x5b\x03\x02\x02\x02\u{fc}\u{105}\x07\x32\x02\
		\x02\u{fd}\u{101}\x09\x03\x02\x02\u{fe}\u{100}\x09\x04\x02\x02\u{ff}\u{fe}\
		\x03\x02\x02\x02\u{100}\u{103}\x03\x02\x02\x02\u{101}\u{ff}\x03\x02\x02\
		\x02\u{101}\u{102}\x03\x02\x02\x02\u{102}\u{105}\x03\x02\x02\x02\u{103}\
		\u{101}\x03\x02\x02\x02\u{104}\u{fc}\x03\x02\x02\x02\u{104}\u{fd}\x03\x02\
		\x02\x02\u{105}\u{106}\x03\x02\x02\x02\u{106}\u{108}\x07\x30\x02\x02\u{107}\
		\u{109}\x09\x04\x02\x02\u{108}\u{107}\x03\x02\x02\x02\u{109}\u{10a}\x03\
		\x02\x02\x02\u{10a}\u{108}\x03\x02\x02\x02\u{10a}\u{10b}\x03\x02\x02\x02\
		\u{10b}\x5d\x03\x02\x02\x02\u{10c}\u{110}\x09\x05\x02\x02\u{10d}\u{10f}\
		\x09\x06\x02\x02\u{10e}\u{10d}\x03\x02\x02\x02\u{10f}\u{112}\x03\x02\x02\
		\x02\u{110}\u{10e}\x03\x02\x02\x02\u{110}\u{111}\x03\x02\x02\x02\u{111}\
		\x5f\x03\x02\x02\x02\u{112}\u{110}\x03\x02\x02\x02\u{113}\u{115}\x0a\x07\
		\x02\x02\u{114}\u{113}\x03\x02\x02\x02\u{115}\u{116}\x03\x02\x02\x02\u{116}\
		\u{114}\x03\x02\x02\x02\u{116}\u{117}\x03\x02\x02\x02\u{117}\x61\x03\x02\
		\x02\x02\u{118}\u{119}\x07\x24\x02\x02\u{119}\u{11a}\x03\x02\x02\x02\u{11a}\
		\u{11b}\x08\x31\x04\x02\u{11b}\u{11c}\x08\x31\x05\x02\u{11c}\x63\x03\x02\
		\x02\x02\x0c\x02\x03\x67\u{f7}\u{fa}\u{101}\u{104}\u{10a}\u{110}\u{116}\
		\x06\x08\x02\x02\x07\x03\x02\x09\x2d\x02\x06\x02\x02";
